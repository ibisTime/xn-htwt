package com.cdkj.loan.ao.impl;import com.cdkj.loan.ao.IEnterFileListAO;import com.cdkj.loan.bo.IEnterFileListBO;import com.cdkj.loan.bo.base.Paginable;import com.cdkj.loan.common.DateUtil;import com.cdkj.loan.common.EntityUtils;import com.cdkj.loan.domain.EnterFileList;import com.cdkj.loan.dto.req.XN632220Req;import com.cdkj.loan.dto.req.XN632222Req;import com.cdkj.loan.exception.BizException;import com.cdkj.loan.exception.EBizErrorCode;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class EnterFileListAOImpl implements IEnterFileListAO {    @Autowired    private IEnterFileListBO enterFileListBO;    @Override    @Transactional(rollbackFor = Exception.class)    public String addEnterFileList(XN632220Req req) {        EnterFileList data = new EnterFileList();        EntityUtils.copyData(req, data);        data.setDepositDateTime(                DateUtil.strToDate(req.getDepositDateTime(), DateUtil.DATA_TIME_PATTERN_2));        return enterFileListBO.saveEnterFileList(data);    }    @Override    @Transactional(rollbackFor = Exception.class)    public int editEnterFileList(XN632222Req req) {        EnterFileList data = enterFileListBO.getEnterFileList(req.getCode());        if (!data.getOperator().equals(req.getOperator())) {            throw new BizException(EBizErrorCode.DEFAULT.getCode(),                    "您不是存放人，不能修改");        }        EntityUtils.copyData(req, data);        data.setDepositDateTime(                DateUtil.strToDate(req.getDepositDateTime(), DateUtil.DATA_TIME_PATTERN_2));        return enterFileListBO.refreshEnterFileList(data);    }    @Override    @Transactional(rollbackFor = Exception.class)    public int dropEnterFileList(String code, String operator) {        EnterFileList enterFileList = enterFileListBO.getEnterFileList(code);        if (!enterFileList.getOperator().equals(operator)) {            throw new BizException(EBizErrorCode.DEFAULT.getCode(),                    "您不是存放人，不能删除");        }        return enterFileListBO.removeEnterFileList(code);    }    @Override    public Paginable<EnterFileList> queryEnterFileListPage(int start, int limit,            EnterFileList condition) {        return enterFileListBO.getPaginable(start, limit, condition);    }    @Override    public List<EnterFileList> queryEnterFileListList(EnterFileList condition) {        return enterFileListBO.queryEnterFileListList(condition);    }    @Override    public EnterFileList getEnterFileList(String code) {        return enterFileListBO.getEnterFileList(code);    }}